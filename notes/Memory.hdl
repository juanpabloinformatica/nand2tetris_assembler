CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    PARTS:
    /*Testing value*/
    /*-1 this should not be allowed*/
    Not16(in=false,out=testNegative,out[15]=testNegativeMSB);
    /*16383   ---> this should be allowed*/
    Not16(in[14..15]=true,in[0..13]=false,out=testOutput,out[15]=testOutputMSB);
    /*25000 ---> this should be NOT allowed*/
    Not16(in[15]=true,in[13..14]=false,in[9..12]=true,in[7..8]=false,in[6]=true,in[4]=true,in[0..2]=true,out=testOutput2,out[15]=testOutput2MSB);
    /* 20000 */
    Not16(in[15]=true,in[14]=false,in[12..13]=true,in[9..11]=false,in[6..8]=true,in[5]=true,in[0..4]=true,out=testOutput3,out[15]=testOutput3MSB);
    /*Define*/
    /*maxCapacity   == 24576
      Because I will do a boolean condition in < maxCapacity
    */
     Not16(in[15] = true , in[13..14]=false,in[0..12]=true, out =maxCapacity,out[15]=maxCapacityMSB );
     /*maxCapacity + 1  == 24577
      Because I will do a boolean condition in < maxCapacity
    */
     Not16(in[15] = true , in[13..14]=false,in[1..12]=true,in[0]=false, out =maxCapacityPlusOne,out[15]=maxCapacityPlusOneMSB );
    /*maxScreen   == 24575
      Because I will do a boolean condition in < maxCapacity
    */
      Not16(in[15]=true,in[14]=false,in[13]=true,in[0..12]=false,out=maxScreen);
      /*Ram plus one --> 16384 */
      Not16(in[15]=true,in[14]=false,in[0..12]=true,out=ramPlusOne);

      /*addressScreen*/
      Not16(in=ramPlusOne,out=oneComplementRamPlusOne);
      Add16(a=oneComplementRamPlusOne,b[0]=true,out=twoComplementRamPlusOne);
      Add16(a=twoComplementRamPlusOne,b[15]=false,b[0..14]=address,out[0..12]=screenAddress);




    /*Address validation test*/
    /*change a*/
    Xor(a=address[14],b=false,out=numberIGTZero);
    Not(in=numberIGTZero,out=numberGTZero);

    Not16(in=maxCapacityPlusOne,out=maxCapacityOneComplement);
    Add16(a=maxCapacityOneComplement,b[0]=true,out=maxCapacityTwoComplement);
    /*change b*/
    Add16(a=maxCapacityTwoComplement,b[15]=false,b[0..14]=address,out=diffInMaxCapacity,out[15]=diffInMaxCapacityMSB);
    Xor(a=diffInMaxCapacityMSB,b=true,out=resultValidINAddition);
    Not(in=resultValidINAddition,out=resultValidNAddition);
    And(a=true,b=resultValidNAddition,out=validNumber);
    /*valid number need to be concatenated with distribution*/
    /*Distribution*/

    Not16(in=maxCapacity,out=maxCapacityOneComplementt);
    Add16(a=maxCapacityOneComplementt,b[0]=true,out=maxCapacityTwoComplementt);
    /*change b*/
    Add16(a=maxCapacityTwoComplementt,b[15]=false,b[0..14]=address,out=diffInMaxCapacityt,out[0..7]=outDiff2FP,out[8..15]=outDiff2SP);

   Or8Way(in=outDiff2FP,out =diff2FinalOrFp );
   Or8Way(in=outDiff2SP,out =diff2FinalOrSp );
   Or(a=diff2FinalOrFp,b=diff2FinalOrSp,out=diff2FinalOr);
   Xor(a=diff2FinalOr,b=false,out=IkeyboardEnabled);
   Not(in=IkeyboardEnabled,out=KeyboardEnabled);
   Keyboard(out =keyboardOutput);
   /*dmux condition logic*/
    Not16(in=ramPlusOne,out=ramPlusOneComplement);
    Add16(a=ramPlusOneComplement,b[0]=true,out=ramPlusOneTwoComplement);
    /*change b*/
    Add16(a=ramPlusOneTwoComplement,b[15]=false,b[0..14]=address,out=diffInRamPlusOne,out[15]=diffInRamPlusOneMSB);
    Xor(a=diffInRamPlusOneMSB,b=true,out=InvertedRam);
    Not(in=InvertedRam,out=selectedRam);
    /*
    I need to substract of the real address.
    */
    DMux(in = load, sel =selectedRam , a = loadScreen, b =loadRam );
    Screen(in = in, load =loadScreen , address =screenAddress , out =outputScreen );
    RAM16K(in = in , load =loadRam , address =address[0..13] , out = outputRam);
    Mux16(a=outputScreen,b=outputRam,sel=selectedRam,out=outputRamOrScreen);
    Mux16(a=outputRamOrScreen,b=keyboardOutput,sel=KeyboardEnabled,out=out);
    //Mux16(a=false,b=chipOutput,sel=validNumber,out=out);

}
